<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

	<http pattern="/**/*.jpg" security="none" />
	<http pattern="/**/*.png" security="none" />
	<http pattern="/**/*.gif" security="none" />
	<http pattern="/**/*.css" security="none" />
	<http pattern="/**/*.js" security="none" />


	<!-- 程序端口映射 -->
	<port-mappings>
		<port-mapping http="9080" https="9443" />
	</port-mappings>
	<!-- 这个元素用来在你的应用程序中启用基于安全的注解 <global-method-security pre-post-annotations="enabled" 
		access-decision-manager-ref="myAccessDecisionManager"/> -->
	<http auto-config="true" access-denied-page="403.jsp">

		<!-- 程序端口映射 -->
		<port-mappings>
			<port-mapping http="9080" https="9443" />
		</port-mappings>
		
		<intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
		<intercept-url pattern="/ssq/**" access="ROLE_ADMIN,ROLE_EDITOR" />
		<intercept-url pattern="/browser/**"
			access="ROLE_ADMIN,ROLE_EDITOR,ROLE_USER" />
		<!-- <intercept-url pattern="/**" access="ROLE_ADMIN,ROLE_EDITOR,ROLE_USER" 
			/> -->


		<!-- "记住我"功能，采用持久化策略（将用户的登录信息存放在数据库表中） -->
		<!-- <remember-me data-source-ref="dataSource" /> -->
		<form-login login-page="/admin/login"
			authentication-failure-url="/admin/login?error=true"
			default-target-url="/admin" always-use-default-target="true" />

		<logout logout-success-url="/admin/login" />
		<http-basic />
		<!-- 实现免登陆验证 -->
		<!-- 只能登陆一次 -->
		<!-- <session-management invalid-session-url="/admin/session"> <concurrency-control 
			max-sessions="1" error-if-maximum-exceeded="true" expired-url="/admin/login" 
			/> </session-management> -->

		<!-- 增加一个filter，这点与acrgi是不一样的，不能修改默认的filter了 -->
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="securityFilter" />

	</http>

	<!-- 自定义的filter， 必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性 
		我们的所有控制将在这三个类中实现 -->
	<beans:bean id="securityFilter"
		class="com.sniper.survey.spring.security.MyFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean"></beans:property>
		<beans:property name="securityMetadataSource" ref="securityMetadataSource"></beans:property>

	</beans:bean>
	
	<!-- 密码加密程序 -->
	<beans:bean name="bcryptEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<!-- 认真管理器，实现用户认证的入口，主要实现USerDetailsService 接口即可 -->
	<authentication-manager alias="authenticationManage">
		<authentication-provider user-service-ref="myUserDetailService">
			<!-- 如果用户的密码采用加密的话可以 -->
			<!-- <password-encoder hash="md5"></password-encoder> -->
			<!-- <user-service> <user name="user" password="123" authorities="ROLE_USER"/> 
				</user-service> -->
		</authentication-provider>
	</authentication-manager>
	<!-- 读取用户的密码，角色信息，是否锁定，账号是否过期 -->
	<beans:bean id="myUserDetailService"
		class="com.sniper.survey.spring.security.myUserDetailService" />
	<!-- 访问决策其，决定那个用户具有的角色，是否足够权限访问 -->
	<beans:bean id="myAccessDecisionManagerBean"
		class="com.sniper.survey.spring.security.myAccessDecisionManagerBean"></beans:bean>
	<!-- 资源数据定义，将所有的资源和权限对应关系建立起来，及定义木易资源可以被大写橘色访问 -->
	<beans:bean id="securityMetadataSource"
		class="com.sniper.survey.spring.security.MyInvocationSecurityMetadataSource" />


	<!-- 如果是代理服务器 删除 JSESSIONID的话 可用下面删除 error-if-maximum-exceeded第二次登录无效 -->
	<!-- <LocationMatch "tutorial/j_spring_security_logout"> Header always set 
		Set-Cookie "JSESSIONID=;Path=/tutorial;Expires=Thu, 01 Jan 1970 00:00:00 
		GMT" </LocationMatch> -->

</beans:beans>

